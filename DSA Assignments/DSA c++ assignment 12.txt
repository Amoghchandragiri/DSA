#include <iostream>
using namespace std;
struct node 
{
  int data;
  struct node *left, *right;
};
node *newNode(int item)
{
  node *temp = new node();
  temp->data = item;
  temp->left = temp->right = NULL;
  return temp;
}
void inorder(struct node *root) 
{
  if (root != NULL) 
  {
    inorder(root->left);
    cout << root->data << " -> ";
    inorder(root->right);
  }
}

// Insert a node
node *insert(node *node, int data) 
{
  // Return a new node if the tree is empty
  if (node == NULL) 
    return newNode(data);

  // Traverse to the right place and insert the node
  if (data < node->data)
    node->left = insert(node->left, data);
  else
    node->right = insert(node->right, data);

  return node;
}

// Find the inorder successor
node *minValueNode(node *node) 
{
  struct node *current = node;
  // Find the leftmost leaf
  while (current && current->left != NULL)
    current = current->left;

  return current;
}
node *deleteNode(node *root, int data) 
{
  // Return if the tree is empty
  if (root == NULL) 
    return root;
  // Find the node to be deleted
  if (data < root->data)
    root->left = deleteNode(root->left, data);
  else if (data > root->data)
    root->right = deleteNode(root->right, data);
  else 
  {
    // If the node is with only one child or no child
    if (root->left == NULL) 
    {
      struct node *temp = root->right;
      free(root);
      return temp;
    } 
    else if (root->right == NULL) 
    {
      struct node *temp = root->left;
      free(root);
      return temp;
    }
    // If the node has two children
    node *temp = minValueNode(root->right);
    // Place the inorder successor in position of the node to be deleted
    root->data = temp->data;
    // Delete the inorder successor
    root->right = deleteNode(root->right, temp->data);
  }
  return root;
}
void search(node *root, int key) 
{
   int depth = 0;
   node *temp = new node();
   temp = root;
   while(temp != NULL) 
   {
      depth++;
      if(temp->data == key) 
      {
         cout<<"\nItem found at depth : "<<depth;
         return;
      } 
      else if(temp->data > key)
        temp = temp->left;
      else
        temp = temp->right;
   }
   cout<<"\nItem not found";
   return;
}
int main() 
{
  struct node *root = NULL;
  int ch;
  do
  {
  cout<<"\n1.Insert"<<endl;
  cout<<"2.Search"<<endl;
  cout<<"3.Delete"<<endl;
  cout<<"4.Display"<<endl;
  cout<<"\nEnter your choice : ";
  cin>>ch;
  switch(ch)
  {
    case 1:
      cout<<"\nEnter Data : ";
      int data;
      cin>>data;
      root = insert(root, data);
    break;

    case 2:
      cout<<"\nEnter Key to Search : ";
      int key;
      cin>>key;
      search(root, key);
    break;

    case 3:
      cout<<"\nEnter Key to Delete : ";
      int del;
      cin>>del;
      root = deleteNode(root, del);
    break;

    case 4:
      cout<<"\nTree : ";
      inorder(root);
    break;
    default:
    cout<<"End";
    break;
  }
  }while(1);
  return 0;
}
  